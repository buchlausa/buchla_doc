"use strict";(self.webpackChunkbuchla=self.webpackChunkbuchla||[]).push([[1426],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,f=p["".concat(l,".").concat(d)]||p[d]||h[d]||a;return n?o.createElement(f,s(s({ref:t},c),{},{components:n})):o.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4287:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={},s=void 0,i={unversionedId:"200e/257",id:"200e/257",title:"257",description:"Control Voltage Processor model 257e",source:"@site/docs/200e/257.md",sourceDirName:"200e",slug:"/200e/257",permalink:"/buchla_doc/docs/200e/257",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Quad Control Voltage Processor model 256e",permalink:"/buchla_doc/docs/200e/256e"},next:{title:"259e-md",permalink:"/buchla_doc/docs/200e/259e-md"}},l={},u=[],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Control Voltage Processor model 257e"),"\nThe 257e is a control voltage processor similar to the 256e module but unto a world of its own. As its name says this is a CV processor. The A and B section function similarly to 256e but that is where the similarities end.  (See the 256e guide above for Sections A & B)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Section C to H:"),"\nSections C through H are for adjusting the slew rate of the input CV signal both negative and positive slew rate and time adjustments.\nThe inputs and outputs are independent, but the slew control parameters are shared in pairs."),(0,r.kt)("p",null,"The red bananas are the pulse outputs as always, the blue bananas are the slewed CV outputs. Next to the red banana are two LEDs.  The red LED will light with every pulse output.  The blue LED will show the CV output."),(0,r.kt)("p",null,"Slew rate knobs:\u2028The Negative slew rate affects the speed of the negative going CV, and positive slew affects positive going CV. The controls allow for a slew rate of .01 to 10 seconds."),(0,r.kt)("p",null,"Example: If you put a square wave into the CV input and turn the negative slew and positive slew knobs to matching positions you can turn that CV input from a square wave to a sine wave.  Or with that square wave in the CV input, by turning one knob all the way down and turning up the other knob you will get something more like a sawtooth wave.  "),(0,r.kt)("p",null,"Note: You can never get a true sawtooth or square wave output since the slew rate does not go to 0.  It will always have some slew."),(0,r.kt)("p",null,"The Grey banana inputs control the slewing parameter just like the knob by to adding to the virtual knob position with it\u2019s CV input.  (Note: If you have the knob turned all the way to the right, the CV input will have no affect. Turn the knob all the way left for the most control.)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Rate/Time/Auto-Pulse enable switch:"),"\nBy changing the slew based on \u201crate\u201d or \u201ctime\u201d you will get slightly different behavior.  Selecting \u201cRate\u201d will usually give you a larger CV output range when the input is faster as it tries to catch up to the input rate.  \u201cTime\u201d selection slews simply slews based on the time it takes for a voltage to go from 0-10v and can result in smoother slew."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Auto-Pulse enable:"),"\nIf you press and HOLD down that same selection switch for 2 seconds, the red LED will light to indicate you have enabled auto-pulsing.  In this mode a pulse will be sent every time the OUTPUT CV reverses direction.\u2028To disable auto-pulsing, HOLD the switch down for another 2 seconds\n\u2028Note: to get a consistent pulse output based on the input CV direction reversal, turn the slew rate knobs down so that slew has minimal effect.  Auto-pulse may be less reliable if the slew rates are long, or above 35Hz, or if the range of the input is limited."))}p.isMDXComponent=!0}}]);